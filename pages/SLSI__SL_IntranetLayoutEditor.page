<apex:page sidebar="false" standardstylesheets="{!$CurrentPage.parameters.OrgSetting != ''}" showheader="false" 
	controller="SLSI.SL_IntranetLayoutEditorController">

	<link type="text/css" rel="stylesheet" href="{!URLFOR($Resource.SL_IntranetHub,'/IntranetHub/widgetCSS/SL_IntranetLayoutEditor.css')}" /> 
	
	<style>
        .settings {
            background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/folder_wrench.png')});
        }
        
        .nav {
            background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/folder_go.png')});
        }
        
        .info {
            background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/information.png')});
        }
        .removeWidget{
            background-image:url({!URLFOR($Resource.SL_ExtJS, '/ext-4.2.1.883/examples/shared/icons/fam/delete.gif')});
        }
    </style>
    
	<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/ext.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/examples/shared/include-ext.js')}" />
	<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_ExtJS, '/ext-4.2.1.883/examples/shared/options-toolbar.js')}" />
   	<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_IntranetHub,'/IntranetHub/js/jQuery-1.8.js')}" /> 
   	<apex:includeScript value="{!URLFOR($Resource.SLSI__SL_IntranetHub,'/IntranetHub/js/jQueryUI-1.9.js')}" />
   	<!-- js and css file for color picker used in custom setting editor view -->
   	<apex:includeScript value="{!URLFOR($Resource.SLSI__Mention_Autocomplete,'/ColorPicker/js/colpick.js')}" />
	<apex:stylesheet value="{!URLFOR($Resource.SLSI__Mention_Autocomplete, '/ColorPicker/css/colpick.css')}" />
	
	
	<apex:outputPanel id="separateThePageScript" rendered="{!$CurrentPage.parameters.OrgSetting == ''}">
		<script type="text/javascript">
		    var 
		      waitingLoader, 
		      vTabViewed = document.location.hash,		   
			  vTabIndex = 0, 
			  vTabName = document.location.href, 
			  SL_currentLayout = '{!JSENCODE(strCurrentPageLayout)}'; 
			  var communityLEId = '{!strCommunityId}';

		    if(vTabName.indexOf('#') != -1)
		    {
		    	vTabName = vTabName.substring(vTabName.indexOf('#') + 1, vTabName.length);
		    	if(vTabName == 'Desktop')
		    		vTabIndex = 0;
		    	else if(vTabName == 'Mobile')
		    		vTabIndex = 1;
		    	else if(vTabName == 'Global')
		    		vTabIndex = 2;
		    }	
			else
		    	vTabIndex = 0;
		    	
		    vTabIndex = parseInt(vTabIndex);
		    
		    var vArrAllPage = new Array();
		    var vArrAllPageTemp = new Array();
		    var vAllPages = '{!JSENCODE(strAllPages)}';
		    vArrAllPageTemp = vAllPages.split(';');
	        for(var i=0; i<vArrAllPageTemp.length; i++)
	        	vArrAllPage.push(vArrAllPageTemp[i].trim());
	        
	        
	        /*** Start : Creating map for widget configuration and function for setting those values ***/
	        
			var WIDGETCONFIGURATION = Ext.create(Ext.grid.PropertyGrid, {
		        id : 'configId',
		        source: { },
		        setSourceData: function(data) {
		            this.setSource( data );
		            if(JSON.stringify(data) == 'null')
		            	this.down('#saveButton').disable();
		            else
		            	this.down('#saveButton').enable();	
		        },
		        dockedItems: 
			    [{ 
			        xtype: 'toolbar',
			        dock: 'bottom',
			        itemId: 'saveButton',
			        disabled: true,
			        ui: 'footer',
			        items: ['->', {
			            text: 'Save Configuration',
			            handler: function(){
			            	waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Saving Configuration. Please wait..."});
							waitingLoader.show();
			            	var gridvalues = this.up('propertygrid').getSource();
			            	document.getElementById('config'+vSelectedWidgetId).innerHTML = JSON.stringify(gridvalues);
			            	Visualforce.remoting.Manager.invokeAction(
			            		'{!$RemoteAction.SL_IntranetLayoutEditorController.updateWidgetConfiguration}',
			            		 vSelectedWidgetId, 
			            		 vSelectedWidgetType,
			            		 JSON.stringify(gridvalues), 
			            		 function(result, event){if(!event.status) alert(event.message); else waitingLoader.hide();}			            		 
			            	);
			            }
			        }]
			    }]
		    });
		    
		    function showDefaultWidgetConfiguration(wID, wType)
		    {
		    	WIDGETCONFIGURATION.setSourceData(eval ("(" + $('#config'+wID).text() + ")"));
    			vSelectedWidgetId = wID;
    			vSelectedWidgetType = wType;	
		    } 
		    
		    /*** End : Creating map for widget configuration and function for setting those values ***/
		    
						        
		    Ext.require(['*']);
		    
			/*** Start : Drag-Drop functionality from Available Widgets to its corresponding Regions ***/
			
			//Drag functionality
			function initializeWidgetDragZone(v) {
			    v.dragZone = Ext.create('Ext.dd.DragZone', v.getEl(), {
			        getDragData: function(e) {
			            var sourceEl = e.getTarget(v.itemSelector, 10), d;
			            if (sourceEl) {
			                d = sourceEl.cloneNode(true);
			                d.id = Ext.id();
			                return (v.dragData = {
			                    sourceEl: sourceEl,
			                    repairXY: Ext.fly(sourceEl).getXY(),
			                    ddel: d,
			                    widgetData: v.getRecord(sourceEl).data
			                });
			            }
			        },
			
			        getRepairXY: function() {
			            hideHighlightedRegions();
			            return this.dragData.repairXY;
			        }
			    });
			}

			//Drop functionality
			function initializeWidgetDropZone(v) {
			    var vDropPosition;
			    
			    v.dropZone = Ext.create('Ext.dd.DropZone', v.getEl(), {
			        getTargetFromEvent: function(e) {
		            	if(e.getTarget('.region-target') && e.getTarget('.region-target').allowWidgetDrop === 'true')
		            	{
		            		$("#"+e.getTarget('.region-target').id + " div.widgetSelected").mouseover(function () {
							    vDropPosition = $(this).index();
							});
							
							$("#"+e.getTarget('.region-target').id + " div.dummyDivT").mouseover(function () {
							    vDropPosition = 0;
							});
							
							$("#"+e.getTarget('.region-target').id + " div.dummyDivB").mouseover(function () {
							    vDropPosition = -1;
							});

		            		return e.getTarget('.region-target');
		            	}	
		            	else
							vDropPosition = null;
			        },
			
			        onNodeOver : function(target, dd, e, data){
			            if(target.allowWidgetDrop === 'true')
			            	return Ext.dd.DropZone.prototype.dropAllowed;
			        },
			
			        onNodeDrop : function(target, dd, e, data){
			            if(target.allowWidgetDrop === 'true')
			            {
				            var vReferenceNode;
				            var vTarget = $("#"+target.id + " .x-fieldset-body .x-component");
				            vTarget = vTarget[0];
				            
				            if((vDropPosition || vDropPosition == 0) && vDropPosition != -1)
				            	vReferenceNode = vTarget.childNodes[vDropPosition+1];
				            else
				            	vReferenceNode = vTarget.childNodes[vTarget.childNodes.length-1];

				            var vDroppedItem = dd.dragData.ddel; 
				            var strCls = vDroppedItem.className; 
				            vDroppedItem.onmousedown = activeWidget;
				            vDroppedItem.onmouseup = null;
				            
				            if(strCls.indexOf("activeWidget") != -1)
				            	strCls = strCls.replace("activeWidget", '');
				            
				            if(strCls.indexOf("widget") != -1)
				            	strCls = strCls.replace("widget", "widgetSelected");	
				           
				            vDroppedItem.className = strCls;
				            
				            vDroppedItem.setAttribute('existingWidget', 'false');
				            
				            if(vReferenceNode)
				            	vTarget.insertBefore(vDroppedItem, vReferenceNode);
				            else
				            	vTarget.appendChild(vDroppedItem);
				            
				            hideHighlightedRegions();
				            
				            return true;
			            }
			        }
			    });
			}
			
			/*** End : Drag-Drop functionality from Available Widgets to its corresponding Regions ***/
			
			
			/*** Start :  Method will be called on ready and create the required component in the DOM **/
			
		    Ext.onReady(function() {
				
				loadDOMElements();

			    arrangeLayouts();
			});
			
			/*** End :  Method will be called on ready and create the required component in the DOM ***/
			
			
			/*** Start :  Method is used to display modal window for create new page functionality ***/
			
			function showCreateNewPageForm() {
		        var win;
		        if (!win) {
		            var layouts = Ext.create('Ext.data.Store', { 
					    fields: ['abbr', 'name'],
					    data :	eval ("(" + '{!JSENCODE(jsonAllLayouts)}' + ")")
					});
					
				    var EXITING_LAYOUTS = Ext.create('Ext.form.ComboBox', {
					    fieldLabel: 'Select Layout',
					    store: layouts,
					    name: 'newPageLayout',
					    queryMode: 'local',
					    displayField: 'name',
					    value: SL_currentLayout,
					    editable: false,
					    valueField: 'abbr',
					});
					
		            var form = Ext.widget('form', {
		                layout: {
		                    type: 'vbox',
		                    align: 'stretch'
		                },
		                border: false,
		                bodyPadding: 10,
		
		                fieldDefaults: {
		                    labelAlign: 'top',
		                    labelWidth: 100,
		                    labelStyle: 'font-weight:bold'
		                },
		                items: [{
		                    xtype: 'textfield',
		                    fieldLabel: 'Page Name',
		                    name: 'newPageName',
		                    allowBlank: false,
		                    emptyText : 'Enter unique page name',
		                    validator: function(value){
						        var vErrorFound = false;
						        for(var i=0; i<vArrAllPage.length; i++)
						        {
						        	if(value.trim().toLowerCase() == vArrAllPage[i].toLowerCase())
						        	{
						        		vErrorFound = true;
						        		break;
						        	}	
						        }

						        if(vErrorFound) 
						            return 'Error! Duplicate page name found.';
						        else if(value.trim().length < 2 && value.trim().length > 0)
						        	return 'Error! Enter minimum 2 character.';    
						        else 
						            return true;
						    }
		                	},
		                	EXITING_LAYOUTS
		                ],
		
		                buttons: [{
		                    text: 'Save',
		                    handler: function() {
		                        var vPageName = this.up('form').down('textfield[name=newPageName]').getValue();  
		                        var vLayout = this.up('form').down('textfield[name=newPageLayout]').getValue();  
		                        if (this.up('form').getForm().isValid()) {
		                            this.up('form').getForm().reset();
		                            this.up('window').hide();
		                            waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Creating new page. Please wait..."});
									waitingLoader.show();
									
									Visualforce.remoting.Manager.invokeAction(
					            		'{!$RemoteAction.SL_IntranetLayoutEditorController.createNewPage}',
					            		 vPageName.trim(), 
					            		 vLayout, 
					            		 document.location.hash,
					            		 function(result, event){if(!event.status) alert(event.message); else {
				            		    	window.location.replace(result);
           		 							waitingLoader.hide(); 
					            		 }}			            		 
					            	);
		                        }
		                    }
		                },{
		                    text: 'Cancel',
		                    handler: function() {
		                        this.up('form').getForm().reset();
		                        this.up('window').hide();
		                    }
		                }]
		            });
		
		            win = Ext.widget('window', {
		                title: 'Create New Page',
		                width: 500,
		                height: 250,
		                layout: 'fit',
		                resizable: true,
		                modal: true,
		                items: form
		            });
		        }
		        win.show();
		    }
		    
		    /*** End :  Method is used to display modal window for create new page functionality ***/
			
			
			/*** Start :  Method is used to edit page name of selected page ***/
			
			function showEditPageForm() {
		        var win;
		        if (!win) {
		            var form = Ext.widget('form', {
		                layout: {
		                    type: 'vbox',
		                    align: 'stretch'
		                },
		                border: false,
		                bodyPadding: 10,
		
		                fieldDefaults: {
		                    labelAlign: 'top',
		                    labelWidth: 100,
		                    labelStyle: 'font-weight:bold'
		                },
		                items: [{
		                    xtype: 'textfield',
		                    fieldLabel: 'Page Name',
		                    name: 'editPageName',
		                    allowBlank: false,
		                    emptyText : 'Enter unique page name',
		                    value: '{!JSENCODE($CurrentPage.parameters.page)}',
		                    validator: function(value){
						        var vErrorFound = false;
						        for(var i=0; i<vArrAllPage.length; i++)
						        {
						        	if(value.trim().toLowerCase() == vArrAllPage[i].toLowerCase())
						        	{
						        		vErrorFound = true;
						        		break;
						        	}	
						        }

						        if(vErrorFound) 
						            return 'Error! Duplicate page name found.';
						        else if(value.trim().length < 2 && value.trim().length > 0)
						        	return 'Error! Enter minimum 2 character.';    
						        else 
						            return true;
						    }
		                	}
		                ],
		
		                buttons: [{
		                    text: 'Save',
		                    handler: function() {
		                        var vUpdatedPageName = this.up('form').down('textfield[name=editPageName]').getValue();  
		                        var vOldPageName = '{!JSENCODE($CurrentPage.parameters.page)}';
		                        if (this.up('form').getForm().isValid()) {
		                            this.up('form').getForm().reset();
		                            this.up('window').hide();
		                            waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Updating page name. Please wait..."});
									waitingLoader.show();
									
									Visualforce.remoting.Manager.invokeAction(
					            		'{!$RemoteAction.SL_IntranetLayoutEditorController.editPageName}',
					            		 vUpdatedPageName.trim(), 
					            		 vOldPageName.trim(),
					            		 document.location.hash,
					            		 function(result, event){if(!event.status) alert(event.message); else {
				            		 	 	window.location.replace(result);
           		 							waitingLoader.hide(); 
					            		 }}			            		 
					            	);
		                        }
		                    }
		                },{
		                    text: 'Cancel',
		                    handler: function() {
		                        this.up('form').getForm().reset();
		                        this.up('window').hide();
		                    }
		                }]
		            });
		
		            win = Ext.widget('window', {
		                title: 'Edit Page',
		                width: 500,
		                height: 180,
		                layout: 'fit',
		                resizable: true,
		                modal: true,
		                items: form
		            });
		        }
		        win.show();
		    }
		    
		    /*** End : Method is used to edit page name of selected page ***/
			

			/*** Start : load all document elements ***/
							
	        function loadDOMElements()
	        {
		        /*** Start : Creating records for all available widgets for Available Widgets section ***/
			    
			    Ext.define('Widget', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{
		        		name : 'regions'
		            },{
		        		name : 'widgetType'
		            },{
		            	name : 'isMobile'
		            },{
		            	name : 'isDesktop'
		            }]
			    });

			    var widgetStore = Ext.create('Ext.data.Store', {
			        model: 'Widget',
			        data: eval ("(" + '{!JSENCODE(jsonAllWidgets)}' + ")")
			    });
			    
			    function doWidgetStoreFiltering(id) {
			    	widgetStore.clearFilter(true);
			    	
			    	switch(id) {
	            		case 'DesktopView':
	            			widgetStore.filter([
						    	{ property: 'isDesktop', value : true }
			    			]);
	            			break;
	            		case 'MobileView':
	            			widgetStore.filter([
						    	{ property: 'isMobile', value : true }
			    			]); 
	            		    break;	 
	            	}
			    }			
    			
			    var AVAILABLE_WIDGET_VIEW = Ext.create('Ext.view.View', {
			        tpl: '<tpl for=".">' +
			                '<div class="widget" id="{widgetId}" onmousedown="showWidgetInformation(this, \'{widgetType}\',\'{regions}\');" onmouseup="hideHighlightedRegions();" >'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height: 40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="$(this.parentNode.parentNode.parentNode.parentNode.parentNode).fadeOut(500, function(){ $(this).remove();});" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>',
			        itemSelector: 'div.widget',
			        singleSelect: true,
			        store: widgetStore,
			        listeners: {
			            render: initializeWidgetDragZone
			        }
			    });
			    
			    /**** End : Creating records for all available widgets for Available Widgets section ***/
			    
			    
			    /**** Start : Creating records for all existing widgets for their respective regions ***/
			    
			    //Header UserInfo Region widgets : HeaderUserInfo
			    Ext.define('WidgetHeaderUserInfo', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderUserInfo = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderUserInfo',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderUserInfo']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERUSERINFO = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderUserInfo
			    });
			    
			    //Header Logo Region widgets : HeaderLogoSection
			    Ext.define('WidgetHeaderLogoSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderLogoSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderLogoSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderLogoSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERLOGOSECTION = Ext.create('Ext.view.View', {
			        tpl: '<div class="dummyDivT" style="width:100%;height:10px;"></div>'+
			        	 '<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderLogoSection
			    });
			    
			    //Header Navigation Region widgets : HeaderNavigationSection
			    Ext.define('WidgetHeaderNavigationSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreHeaderNavigationSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetHeaderNavigationSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['HeaderNavigationSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_HEADERNAVIGATIONSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreHeaderNavigationSection
			    });
			    
			    //Banner Region widgets : BannerRegion
			    Ext.define('WidgetBannerRegion', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreBannerRegion = Ext.create('Ext.data.Store', {
			        model: 'WidgetBannerRegion',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['BannerRegion']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_BANNERREGION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreBannerRegion
			    });
			    
			    //Left Sidebar Region widgets : LeftSideBar
			    Ext.define('WidgetLeftSideBar', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftSideBar = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftSideBar',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftSideBar']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTSIDEBAR = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftSideBar
			    });
			    
			    //LeftMain Section widgets : LeftMainSection
			    Ext.define('WidgetLeftMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftMainSection
			    });
			    
			    //LeftHalf Section widgets : LeftHalfSection
			    Ext.define('WidgetLeftHalfSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreLeftHalfSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetLeftHalfSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['LeftHalfSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_LEFTHALFSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreLeftHalfSection
			    });
			    
			    //Main Section Region widgets : MainSection
			    Ext.define('WidgetMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMainSection
			    });
			    
			    //MainFull Section widgets : MainFullSection
			    Ext.define('WidgetMainFullSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMainFullSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMainFullSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MainFullSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MAINFULLSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMainFullSection
			    });
			    
			    //Right Sidebar Region widgets : RightSideBar
			    Ext.define('WidgetRightSideBar', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightSideBar = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightSideBar',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightSideBar']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTSIDEBAR = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightSideBar
			    });
			    
			    //RightMain Section widgets : RightMainSection
			    Ext.define('WidgetRightMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightMainSection
			    });
			    
			    //RightHalf Section widgets : RightHalfSection
			    Ext.define('WidgetRightHalfSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreRightHalfSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetRightHalfSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['RightHalfSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_RIGHTHALFSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>', 
			        store: widgetStoreRightHalfSection
			    });
			    
			    //Footer Region widgets : FooterSection
			    Ext.define('WidgetFooterSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreFooterSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetFooterSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['FooterSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_FOOTERSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreFooterSection
			    });
			    
			    //Existing widgets for Mobile section : MobileMainSection
			    Ext.define('WidgetMobileMainSection', {
			        extend: 'Ext.data.Model',
			        idProperty: 'widgetId',
			        fields: [{ 
		                name: 'name',
		            },{ 
		                name: 'widgetType',
		            }]
			    });
			    
			    var widgetStoreMobileMainSection = Ext.create('Ext.data.Store', {
			        model: 'WidgetMobileMainSection',
			        data: eval ("(" + '{!jsonMapRegionToExistingWidget['MobileMainSection']}' + ")")
			    });
			    
			    var EXISTING_WIDGET_MOBILEMAINSECTION = Ext.create('Ext.view.View', {
			        tpl:'<div class="dummyDivT" style="width:100%;height:10px;"></div>'+ 
			        	'<tpl for=".">' +
			                '<div class="widgetSelected" id="{widgetId}" existingWidget="true" onmousedown="activeWidget(this)">'+
			                	'<input type="hidden" value="{widgetType}" class="hidden"/>'+
			                	'<table align="center" style="width:100%;min-height:40px;" ><tbody>' +
				                    '<tr><td style="padding-left:18px;" class="widgetName">{name}</td>'+
				                    	'<td style="width:18px;vertical-align: top;">'+
				                    		'<div class="removeWidget" onclick="removeWidget(this);" title="Remove Widget" ></div>'+
				                    '</td></tr>' +
			                	'</tbody></table>'+
			                '</div>' +
			             '</tpl>'+
			             '<div class="dummyDivB" style="width:100%;height:10px;"></div>',
			        store: widgetStoreMobileMainSection
			    });
			    
			    /**** Start : Creating records for all existing widgets for their respective regions ***/
			    

			    /**** Start : Creating view for Mobile  ***/
			    
			    var MOBILE_REGION_VIEW = Ext.create('Ext.panel.Panel', {
				    title: 'Mobile',
				    width: '100%',
				    autoScroll: true,
				    id:'MobileView',
				    layout: {
				        type: 'table',
				        columns: 1
				    },
				    items: [{
				        xtype: 'fieldset',
				        columnWidth: 0.5,
				        id:'MobileMainSection',
				        title: 'Mobile Main Section',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'300px'},
				        items : [
				        	EXISTING_WIDGET_MOBILEMAINSECTION
				        ]
				    }],
				    listeners: {
			            render: initializeWidgetDropZone,
			            activate: function(tab){
	                        if(vTabViewed.indexOf('Mobile') == -1)
	                        	vTabViewed = vTabViewed + '#Mobile';
	                        window.location.hash = 'Mobile';
	                    }
			        }
				});
				
				/**** End : Creating view for Mobile  ***/
				
				
				/**** Start : Creating view for Desktop  ***/
			    
		        var DESKTOP_REGION_VIEW = Ext.create('Ext.panel.Panel', {
				    title: 'Desktop',
				    width: '100%',
				    autoScroll: true,
				    id:'DesktopView',
				    layout: {
				        type: 'table',
				        columns: 8
				    },
				    items: [{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'UserInfo Region',
				        id:'HeaderUserInfo',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERUSERINFO
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Logo Region',
				        id:'HeaderLogoSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERLOGOSECTION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Navigation Region',
				        id: 'HeaderNavigationSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_HEADERNAVIGATIONSECTION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Banner Region',
				        id:'BannerRegion',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_BANNERREGION
				        ]
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftSideBar',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTSIDEBAR
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftMainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTMAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Left SideBar',
				        id:'LeftHalfSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_LEFTHALFSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Main Section',
				        id:'MainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_MAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Main Section',
				        id:'MainFullSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_MAINFULLSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightSideBar',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTSIDEBAR
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightMainSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTMAINSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 1,
				        columnWidth: 0.5,
				        title: 'Right SideBar',
				        id:'RightHalfSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'150px'},
				        items : [
				        	EXISTING_WIDGET_RIGHTHALFSECTION
				        ],
				        tdAttrs: {
						    style:{"vertical-align": 'top'}
						}
				    },{
				        xtype: 'fieldset',
				        colspan: 8,
				        columnWidth: 0.5,
				        title: 'Footer Region',
				        id:'FooterSection',
				        margin: '5 5 5 5',
				        cls:'region-target',
				        style:{minHeight :'50px'},
				        items : [
				        	EXISTING_WIDGET_FOOTERSECTION
				        ]
				    }],
				    listeners: {
			            render: initializeWidgetDropZone,
			            activate: function(tab){
	                        if(vTabViewed.indexOf('Desktop') == -1)
	                        	vTabViewed = vTabViewed + '#Desktop';
	                        window.location.hash = 'Desktop';
	                    }
			        }
				});
				
				/**** End : Creating view for Desktop  ***/
		        
		        
		        // NOTE: This is an example showing simple state management. During development, it is generally best to disable state management as dynamically-generated ids
		        // can change across page loads, leading to unpredictable results.  The developer should ensure that stable state ids are set for stateful components in real apps.
		        
		        Ext.state.Manager.setProvider(Ext.create('Ext.state.CookieProvider'));
				
				
				/*** Start : Select or Create new page ***/
				
			    var pages = Ext.create('Ext.data.Store', {
				    fields: ['abbr', 'name'],
				    data : eval ("(" + '{!JSENCODE(jsonAllPages)}' + ")")
				});
			    
			    var EXITING_PAGES = Ext.create('Ext.form.ComboBox', {
				    fieldLabel: 'Select Page',
				    store: pages,
				    queryMode: 'local',
				    value: "{!JSENCODE(strCurrentPage)}",
				    labelStyle : 'font-weight: bold;color: white;',
				    displayField: 'name',
				    editable: false,
				    valueField: 'abbr',
				    listeners: {
					    scope: this,
         				beforeselect: function(combo, records, index){
         					oldPageValue = combo.getRawValue();
         				},
         				select: function(combo, records, index){
         					newPageValue = combo.getRawValue();
         					Ext.Msg.show({
							     title:'Save Changes?',
							     msg: 'You are closing a page that has unsaved changes. Would you like to save your changes?',
							     buttons: Ext.Msg.YESNOCANCEL,
							     icon: Ext.Msg.QUESTION,
							     fn: function (btn) {
					                if (btn == 'yes') {
					                	saveWidgetConfiguration(newPageValue, oldPageValue, 'false');	//param : current page, old page, redirect to home
					                }
					                else if (btn == 'no') {
					                	window.location = 'SLSI__SL_IntranetLayoutEditor?page='+encodeURIComponent(newPageValue)+document.location.hash;		
					                }
					                else if(btn == 'cancel') {
					                	combo.setValue(oldPageValue);
					                }
					             } 
							});
         				}
					}
				});
				
				/*** End : Select or Create new page ***/
				
				
				/*** Start : Creating buttons ***/
				
				var SAVE_CANCEL_DELETE_BUTTONS = Ext.create('Ext.Container', {
				    style:{"float":"right"}, 
				    items: [{
				        	xtype: 'button',
				            text : 'Save',
				            id: 'Save-Button',
						    handler: function() {
						        var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						        saveWidgetConfiguration(vCurrentPage, vCurrentPage, 'true'); //param : current page, current page, redirect to home
						    }
				        }, {
				        	xtype: 'button',
				            text : 'Quick Save',
				            margin: '0 5 0 5',
				            id: 'QSave-Button',
						    handler: function() {
						        var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						        
						        console.log('page name in save:', vCurrentPage);

						        saveWidgetConfiguration(vCurrentPage, vCurrentPage, 'false');	//param : current page, current page, redirect to home
						    }
				        }, {
				        	xtype: 'button',
				            text : 'Cancel',
				            id: 'Cancel-Button',
				            margin: '0 5 0 0',
						    handler: function() {
						     if('{!JSENCODE($CurrentPage.parameters.page)}' == 'Employee Profile')
               						window.location.href = 'SLSI__SL_Intranet?page='+'{!URLENCODE($CurrentPage.parameters.page)}' + '&id=' + '{!$User.Id}';
              					else
               						window.location.href = 'SLSI__SL_Intranet?page='+'{!URLENCODE($CurrentPage.parameters.page)}';
						    }
				        }, {
				            xtype: 'button',
				            text : 'Delete',
				            id: 'Delete-Button',
						    handler: function() {
						    	Ext.Msg.show({
								     title:'Delete Page?',
								     msg: 'Are you sure want to delete this page?',
								     buttons: Ext.Msg.YESNO,
								     icon: Ext.Msg.QUESTION,
								     fn: function (btn) {
						                if (btn == 'yes') {

						                	var vCurrentPage = '{!JSENCODE($CurrentPage.parameters.page)}';
						                	waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Deleting Page. Please wait..."});
											waitingLoader.show();
						                	
						                	Visualforce.remoting.Manager.invokeAction(
							            		'{!$RemoteAction.SL_IntranetLayoutEditorController.deleteExistingPage}',
							            		 vCurrentPage.trim(),
							            		 function(result, event){if(!event.status) alert(event.message); else {
						            		 	 	document.location.href = result; 
		           		 							waitingLoader.hide(); 
							            		 }}			            		 
							            	);
						                }
						             } 
								});
						    }	
				        }
				    ]
				});
				
				/*** End : Creating buttons ***/
				
				
				/*** Start : Create new page and Edit page button ***/
				
				var CREATENEW_BUTTON = Ext.create('Ext.Button', {
				    text: 'Create New Page',
				    margin : '0 0 0 10',
				    handler: function() {
				        showCreateNewPageForm();
				    }
				});
				
				var EDITPAGE_BUTTON = Ext.create('Ext.Button', {
				    text: 'Edit Page',
				    margin : '0 0 0 10',
				    //disabled: true,
				    handler: function() {
				        showEditPageForm();
				    }
				});
				
				if(communityLEId == '') {

					var ORG_SETTING_BUTTON = Ext.create('Ext.Button', {
					    text: 'Org Level Settings',
					    margin : '0 0 0 10',
					    //disabled: true,
					    handler: function() {
					        showOrgSetting();
					    }
					});
				}
				/*** Start : Create new page and Edit page button ***/
				
				
				/**** Start : Creating view for Complete layout editor page  ***/
				
		        var viewport = Ext.create('Ext.Viewport', {
		            id: 'border-example',
		            layout: 'border',
		            items: [
			            // create instance immediately
			            Ext.create('Ext.container.Container', {
			                region: 'north',
			                layout: {
						        type: 'column'
						    },
			                style:{"margin":"10px"}, 
			                items: [	
			                	EXITING_PAGES,
			                	CREATENEW_BUTTON,
			                	EDITPAGE_BUTTON,
			                	ORG_SETTING_BUTTON,
			                	SAVE_CANCEL_DELETE_BUTTONS
		                	]
			            }), {
			                region: 'south',
			                contentEl: 'south',
			                split: true,
			                height: 120,
			                minSize: 100,
			                maxSize: 200,
			                collapsible: true,
			                collapsed: false,
			                title: 'Widget Information',
			                autoScroll: true,
			                margins: '0 0 0 0'
			            }, {
			                region: 'east',
			                title: 'Widget Configuration',
			                id: 'east-panel',
			                animCollapse: true,
			                layout:'absolute',
			                collapsible: true,
			                split: true,
			                autoScroll: true,
			                width: 450, // give east and west regions a width
			                minSize: 200,
			                maxSize: 550,
			                margins: '0 5 0 0',
			                items: [
			                	WIDGETCONFIGURATION
	                    	]
		            	}, {
			                region: 'west',
			                stateId: 'navigation-panel',
			                id: 'west-panel',
			                title: 'Available Widgets',
			                split: true,
			                width: 200,
			                minWidth: 175,
			                maxWidth: 400,
			                collapsible: true,
			                animCollapse: true,
			                margins: '0 0 0 5',
			                autoScroll: true,
			                items: [
			                	AVAILABLE_WIDGET_VIEW
		                	]
		            	},
			           
			            // in this instance the TabPanel is not wrapped by another panel since no title is needed, this Panel is added directly as a Container
			            Ext.create('Ext.tab.Panel', {
			                region: 'center', // a center region is ALWAYS required for border layout
			                deferredRender: false,
			                activeTab: vTabIndex,     // first tab initially active
			                id: 'center-panel',
			                items: [
			                    DESKTOP_REGION_VIEW,
			                    MOBILE_REGION_VIEW
			                ],
			                listeners: {
					            'tabchange': function (tabPanel, tab) {
					            	doWidgetStoreFiltering(tab.id);
					            },
					            'render' : function(c, options) {
					            	doWidgetStoreFiltering(c.activeTab.id);
					            }
					        }								                
		            	})
		            ]
		        });
		        
		        /**** End : Creating view for Complete layout editor page  ***/
		    }
		    
		    /*** End : load all document elements ***/
		    
		    /*** Start : this section is used to render page according to corresponding layout ***/
		    
		    function arrangeLayouts()
		    {
				if(SL_currentLayout == '3 Column Layout Page')
				{
					document.getElementById('LeftSideBar').parentNode.style.width = '30%';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").parentNode.style.width = '40%';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById('RightSideBar').parentNode.style.width = '30%';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if(SL_currentLayout == '2 Column Layout Right Main Page')
				{
					document.getElementById("LeftSideBar").parentNode.style.width = '30%';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById('RightSideBar').style.display = 'none';
					document.getElementById('RightMainSection').parentNode.style.width = '70%';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if(SL_currentLayout == '2 Column Layout Left Main Page')
				{
					document.getElementById('LeftSideBar').style.display = 'none';
					document.getElementById('LeftMainSection').parentNode.style.width = '70%';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById("RightSideBar").parentNode.style.width = '30%';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
				else if(SL_currentLayout == '2 Column Layout Half Page')
				{
					document.getElementById("LeftSideBar").style.display = 'none';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').parentNode.style.width = '50%';
					document.getElementById('MainSection').style.display = 'none';
					document.getElementById("MainFullSection").style.display = 'none';
					document.getElementById("RightSideBar").style.display = 'none';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').parentNode.style.width = '50%';
				}
				else if(SL_currentLayout == '1 Column Layout Page')
				{
					document.getElementById('LeftSideBar').style.display = 'none';
					document.getElementById('LeftMainSection').style.display = 'none';
					document.getElementById('LeftHalfSection').style.display = 'none';
					document.getElementById("MainSection").style.display = 'none';
					document.getElementById("MainFullSection").parentNode.style.width = '100%';
					document.getElementById('RightSideBar').style.display = 'none';
					document.getElementById('RightMainSection').style.display = 'none';
					document.getElementById('RightHalfSection').style.display = 'none';
				}
		    }
		    
		    /*** End : this section is used to render page according to corresponding layout ***/
		    
		    var vPoosibleRegions = new Array('HeaderUserInfo','HeaderLogoSection','HeaderNavigationSection',
				'BannerRegion','LeftSideBar','MainSection','RightSideBar','FooterSection','MobileMainSection',
				'LeftMainSection','RightMainSection','LeftHalfSection','RightHalfSection','MainFullSection');

		    function showWidgetInformation(divId, widgetType, regions)
		    {
		    	document.getElementById('south').innerHTML = '<pre style="white-space: pre-line;">' + document.getElementById(widgetType).innerHTML + '</pre>';

		    	showHighlightedRegions(regions);
		    	
		    	activeWidget(divId);
		    }
		    
		    function showHighlightedRegions(regions)
		    {
		    	for(var i=0; i<vPoosibleRegions.length; i++)
	    		{
   					document.getElementById(vPoosibleRegions[i].trim()).style.background = '';
   					document.getElementById(vPoosibleRegions[i].trim()).allowWidgetDrop = 'false';
	    		}
		    	
		    	if(regions != null && regions != '')
		    	{
		    		var vRegions = new Array();
		    		vRegions = regions.split(';');
		    		for(var i=0; i<vRegions.length; i++)
		    		{
	    				if(vPoosibleRegions.indexOf(vRegions[i].trim()) > -1)
	    				{
	    					document.getElementById(vRegions[i].trim()).style.background = 'lightyellow';
	    					document.getElementById(vRegions[i].trim()).allowWidgetDrop = 'true';
	    				}
		    		}
		    	}
		    }
		    
		    function hideHighlightedRegions() 
		    {
		    	for(var i=0; i<vPoosibleRegions.length; i++)
	    		{
   					document.getElementById(vPoosibleRegions[i].trim()).style.background = '';
   					document.getElementById(vPoosibleRegions[i].trim()).allowWidgetDrop = 'false';
	    		}
		    }
		    
		    function removeWidget(DivElement)
		    {
		    	var vParentDiv = DivElement.parentNode.parentNode.parentNode.parentNode.parentNode;
		    	WIDGETCONFIGURATION.setSourceData(null);
		    	$(vParentDiv).fadeOut(250, function(){ $(this).remove();});
		    }
		    
		    setTimeout(function(){
			    $(function() {
					$( ".region-target .x-fieldset-body .x-component" ).sortable({axis: "y" }, { containment: "parent" }, { items: ".widgetSelected" });
				});
			},2000)
			
			
			function saveWidgetConfiguration(nPage, oPage, redirectHome)
			{
				waitingLoader = new Ext.LoadMask(Ext.getBody(), {msg:"Saving Configuration. Please wait..."});
				waitingLoader.show();
				
				var vWidgetConfigurationJSON = [];
				var vSelectedWidgets = document.getElementsByClassName('widgetSelected');
				for(var i=0; i<vSelectedWidgets.length; i++)
				{
					var vWidgetId = vSelectedWidgets[i].getAttribute('existingWidget'); 
					if(vWidgetId === 'true')
						vWidgetId = vSelectedWidgets[i].id;
					else
						vWidgetId = 'null';
					
					var vParent = $("#"+vSelectedWidgets[i].id).closest("fieldset");
					var vWidgetType = $(vSelectedWidgets[i]).find(".hidden").val();
					vWidgetConfigurationJSON.push({name: vParent[0].id, widgetType: vWidgetType, widgetId: vWidgetId});
				}

				if(vTabViewed.indexOf('Desktop') != -1 && vTabViewed.indexOf('Mobile') == -1)
					vTabViewed = 'Desktop';
				else if(vTabViewed.indexOf('Desktop') == -1 && vTabViewed.indexOf('Mobile') != -1)
					vTabViewed = 'Mobile';
				else if(vTabViewed.indexOf('Desktop') != -1 && vTabViewed.indexOf('Mobile') != -1)
					vTabViewed = 'All';
							
				Visualforce.remoting.Manager.invokeAction(
            		'{!$RemoteAction.SL_IntranetLayoutEditorController.saveWidgetConfigurations}',
            		 JSON.stringify(vWidgetConfigurationJSON),
            		 nPage,
            		 oPage,
            		 redirectHome, 
            		 document.location.hash,
            		 vTabViewed,
            		 function(result, event){if(!event.status) alert(event.message); else {
            		    if(result.indexOf('#') != -1 && nPage == oPage)
            		    {
            		    	window.location.href = result;
            		    	window.location.reload();
            		    }
            		    else
            		    	window.location.href = result;

            		 	waitingLoader.hide(); 
            		 }}			            		 
            	);
			} 
			
			function activeWidget(divId)
			{
				if(!divId.id)
					divId = this;

				if(divId.className.indexOf('widgetSelected') != -1 )
				{
					showDefaultWidgetConfiguration(divId.id, 'PageRegionWidget');
					document.getElementById('south').innerHTML = '<pre style="white-space: pre-line;">Select Widget from Available Widgets section to see the information about Widget.</pre>';
				}	
				else if(divId.className.indexOf('widget') != -1)	
					showDefaultWidgetConfiguration(divId.id, 'Widget');
					
				var vSelectedWidgets = document.getElementsByClassName('activeWidget');
				for(var i=0; i<vSelectedWidgets.length; i++)
				{
					$("#"+vSelectedWidgets[i].id).removeClass('activeWidget');
				}
				
				$(divId).addClass('activeWidget');
			}
			
			function showOrgSetting()
			{
				oldURL = window.location.href
				changeURL = window.location.href;
				changeURL = changeURL.substring(0,changeURL.indexOf('#'));
				window.location.href = changeURL + '&OrgSetting=globalLevel';
			}
			
	    </script>
    </apex:outputPanel>
    

	<apex:form >
	
		<apex:actionFunction name="updateList" rerender="documentFolder" status="loading"/>
		<apex:actionFunction name="updateCustomSetting" action="{!updateSetting}" status="loading" rerender="separateTheCustomSetting, scriptCode" />
		
		
		<apex:outputPanel id="separateThePageBody" rendered="{!$CurrentPage.parameters.OrgSetting == ''}">
		    <div id="west" class="x-hide-display">
		    	
		    </div>
	
		    <div id="center1" class="x-hide-display">
		       	
		       	<div class="config-block">
				
				</div>
		    </div>
	
		    <div id="center2" class="x-hide-display">
		    
		    </div>
		    
		    <div id="props-panel" class="x-hide-display" style="width:200px;height:200px;overflow:hidden;"></div>
		    
		    <div id="south" class="x-hide-display">
		        <pre style="white-space: pre-line;">This section will display selected Widget information.</pre>
		    </div>
		    
		    <div style="left:-99999px;position: fixed;">
			    <apex:repeat value="{!mapWidgetDescription}" var="v">
			    	<div id="{!v}">{!mapWidgetDescription[v]}</div>
			    </apex:repeat>
		    </div>
		     
		    <div style="left:-99999px;position: fixed;">
			    <apex:repeat value="{!mapDefaultWidgetConfiguration}" var="v">
			    	<div id="config{!v}">{!mapDefaultWidgetConfiguration[v]}</div> 
			    </apex:repeat>
		    </div>
	    </apex:outputPanel>
		    
		    
		    <!-- ---START------Setion to display Custom setting view----------- -->
		    
	    <apex:outputPanel id="separateTheCustomSetting" rendered="{!$CurrentPage.parameters.OrgSetting != ''}" style="width:100%">
			<div id="headerPanel" style="background:#3892d3;height:62px;">
				<input class="btnHeader" style="margin-left: 35.5%;" type="button" value ="Back To Widget Configuration" onclick="backToMainPage();" />
				<input class="btnHeader" style="margin-left: 1%;" type="button" value="Update Custom Settings" onclick="updateSetting()"/>
			</div>
			
			<div id="partitionDiv" style="width:100%;display: inline-block;">
				<div id="divBeforeTable" style="width: 47%;display: inline-block;margin-top: 10px; margin-bottom:10px;margin-left: 12px;">
					<table id="customSettingArrangement"  style="width:100%;">
						<tr style="width:100%;">
							<apex:outputPanel id="csBooleanFieldHardCoded" layout="none">
								<td style="background: #add2ed;">
									<apex:outputLabel value="Default" for="BooleanFieldDefault" style="float:left;"/>
								</td>
								<td id="defaultTD" style="background: #add2ed;"> 
									<apex:inputField id="BooleanFieldDefault" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText['SLSI__Default__c']}'); hideDescription();" 
											value="{!customSetting.SLSI__Default__c}" onchange="checkCssStatus(this.checked);" style="margin-right:5px;"/>
	                   			</td>
							</apex:outputPanel>
						</tr>
						<tr>
							<apex:outputPanel id="csLogo" layout="none">
								<td style="background: #add2ed;">
									<label style="float:left;" for="selectLogo">Logo</label>
								</td>
								<td  style="background: #add2ed;">
									<apex:inputHidden id="inputlogoId" value="{!customSetting.SLSI__Logo__c}" />
									<input id="selectLogo" type="button" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText['SLSI__Logo__c']}'); hideDescription();" 
																			value="Select a Logo" onclick="chooseFile();" />
								</td>
							</apex:outputPanel>
							
						</tr> 
						
						<apex:repeat id="repCustomSetting" value="{!lstCustomSettingField}" var="obj">
							<tr class="cellStyle" style="border:2px solid black;" >
								<apex:outputPanel id="csBooleanField" rendered="{!obj.isDefault}" layout="none">
									<td>
										<apex:outputLabel value="{!obj.fLabel}" for="BooleanField" style="float:left;"/>
									</td>
									<td> 
										<apex:inputField id="BooleanField" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText[obj.fName]}'); hideDescription();"
																			 value="{!customSetting[obj.fName]}"  style="margin-right:5px;"/>
		                   			</td>
								</apex:outputPanel>
								
								<apex:outputPanel id="csFontSize" rendered="{!CONTAINS(obj.fName,'Font_Size')}" layout="none">
									<td>
										<apex:outputLabel value="{!obj.fLabel}" for="fontSize" style="float:left;"/>
									</td>
									<td id="fontSize{!obj.fName}">
										<apex:inputField id="fontSize" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText[obj.fName]}'); hideDescription();" 
																		value="{!customSetting[obj.fName]}" style="margin-right:5px;" 
																		onblur="updateFontCss('font-size','{!obj.fLabel}',this.value); 
																				storeIds('fontSize{!obj.fName} select', this.value);"/>
										<apex:selectList id="selectFontSize" value="{!customSetting[obj.fName]}"  size="1" style="max-width:96%;"  
																onchange="$('#fontSize{!obj.fName} input').val(this.value);
																 			updateFontCss('font-size','{!obj.fLabel}',this.value); 
																 			storeIds('fontSize{!obj.fName} select', this.value);">
		                      				<apex:selectOptions value="{!lstFontSize}" />
		                      			</apex:selectList>
		                   			</td>
								</apex:outputPanel>
								
								<apex:outputPanel id="csFontFamily" rendered="{!CONTAINS(obj.fName,'Font_Family')}" layout="none">
									<td>
										<apex:outputLabel value="{!obj.fLabel}" for="fontFamily" style="float:left;"/>
									</td>
									<td id="fontFamily{!obj.fName}">
										<apex:inputField id="fontFamily" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText[obj.fName]}'); hideDescription();" 
																		value="{!customSetting[obj.fName]}" style="margin-right:5px;" 
																		onblur="updateFontCss('font-family','{!obj.fLabel}',this.value);
																				storeIds('fontFamily{!obj.fName} select', this.value);"/>
										
										<apex:selectList value="{!customSetting[obj.fName]}"  size="1" style="max-width:96%;"  
														onchange="$('#fontFamily{!obj.fName} input').val(this.value);
																	updateFontCss('font-family','{!obj.fLabel}',this.value);
																	storeIds('fontFamily{!obj.fName} select', this.value);">
				                      		<apex:selectOptions value="{!lstFontFamily}" />
				                      	</apex:selectList>
			                      	</td>
								</apex:outputPanel>
								 
								<apex:outputPanel id="csColor" rendered="{!CONTAINS(obj.fName,'Color')}" layout="none">
									<td>
										<apex:outputLabel value="{!obj.fLabel}" for="colorField" style="float:left;"/>
									</td>
									<td id="colorField{!obj.fName}">
										<apex:inputField id="colorField" onfocus="$('#footerPanelHelp').html('{!mapFieldNameToHelpText[obj.fName]}'); hideDescription();" 
																		value="{!customSetting[obj.fName]}" style="float:left" 
																		onblur="updateFontCss('color','{!obj.fName}',this.value);"/>
										<div id="{!obj.fName}" class="color-box" 
																style="background-color:{!IF(customSetting[obj.fName] == '','#ff8800', customSetting[obj.fName])}" />
									</td>
								</apex:outputPanel>
								
								<apex:outputPanel id="text" rendered="{!CONTAINS(obj.fName,'SLSI__Footer__c')}" layout="none">
									<td>
										<apex:outputLabel value="{!obj.fLabel}" style="float:left;"/>
									</td>
									<td id="footerText">
										<apex:inputField style="width:325px;" value="{!customSetting[obj.fName]}"/>
									</td>
								</apex:outputPanel>
							</tr>
						</apex:repeat>
					</table>
				</div>
				
				<!-- ---START-----Perview Section to display currently applied css via custom setting -->
				
				<div id="previewpanel" style="border-left: 4px solid #3892d3;width:50%;float:right;display: inline-block;">
					<div id="previewHeader" class="previewHeader">
						Header section
					</div>
					<div id="logoDiv" style="margin-left: 10px;margin-right: 10px;">
						<img class = "SLSI__imgTagLogo__c" src = "{!URLFOR($Resource.SL_IntranetHub,'/IntranetHub/images/logo.png')}" width="130" height="70"  />
						Top Bar Background color
					</div>
					
					<div id="previewMainSection" style="margin-left: 10px; margin-right: 10px;">
						<h2>
						<span id="pageHeading" class="previewHeading" style="width:100%;">
							Page Heading : Notification List Widget
						</span></h2><br/><br/>
						
						<div id="recordSection">
							<h3>
								<span id="pageRecord1" class="previewRecord" style="width:100%;">
								Page Record 1- Notification For All OFFICES :
								</span>
							</h3><br/>
							
							<span id="defaultText2" class="previewDefault" style="width:100%;">
								Default text for Record1:<br/>
								The European languages are members of the same family. Their separate existence is a myth. 
								For science, music, sport, etc, Europe uses the same vocabulary. The languages only differ in 
								their grammar, their pronunciation and their most common words. Everyone realizes why a new common language would be desirable.
							</span><br/><br/><br/>
							
							<h3>
								<span id="pageRecord2" class="previewRecord" style="width:100%;">
								Page Record 2- Notification For Satelite Offices :
								</span>
							</h3><br/>
							
							<span id="defaultText2" class="previewDefault" style="width:100%;">
								Default text for Record2:<br/>
								The European languages are members of the same family. Their separate existence is a myth. 
								For science, music, sport, etc, Europe uses the same vocabulary. The languages only differ in 
								their grammar, their pronunciation and their most common words. Everyone realizes why a new common language would be desirable.
							</span><br/><br/>
							 
							<div>
								<h3>
									<span id="selectedGrp" class="previewDefault" style="width:100%;color:#ba0320">
									Chatter Selected Group
									</span>
								</h3><br/>
								<span id="featuredGrp" style="color:#c52032">
								______________________________________________________________
																							Chatter Featured Group
								</span><br/>
									
								<h3>
									<span class="previewRecord" style="width:100%;">
									Post By: Administrator
									</span>
								</h3><br/>
								<span style="width:100%" class="previewDefault">
									Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Aenean commodo ligula eget dolor. Aenean massa.
								 	Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Donec quam felis,
							 	 	ultricies nec, pellentesque eu, pretium quis, sem. Nulla consequat massa quis enim. Donec pede justo, fringilla vel,
							   		aliquet nec, vulputate
							   </span>
					   		</div>
						</div>
					</div>
					
					<div id="previewFooter" class="previewFooter" >
						Footer Section: Copyright Message
					</div>
				
				</div>
				<!-- -----END----Perview Section------- -->
				
			</div>
			
			<div id="footerPanel" style="background:#3892d3;height:64px;color:white;">
				<h2 id="descriptionH2" style="margin-left:10px;margin-top:10px;">Description :</h2><br/>
				<span style="margin-left:10px;" id="footerPanelHelp"></span>
			</div>
			
			<!-- ---END------Setion to display Custom setting view----------- -->	
				
				 <!-- ----------- Section to display Logo Selection Window -->
				<apex:outputpanel id="chooseFile" >
					<div id="eventBgId" style="display: none;" class="docViewerPanel popUpWindow">
						<div aria-describedby="docViewerOverlayTitle" aria-live="assertive"  class="overlayDialog docViewerOverlay innerpopUpWindow" id="contactInfo" role="dialog">
							<div class="topRight" >
					            <div class="topLeft">
					                <a class="dialogClose" href="javascript:void(0)" id="contactInfoX"  tabindex="0" onclick="closePopUp();" title="Close">Close</a>
					                <h2 id="contactInfoTitle" >Choose a Logo</h2>
					            </div>
					        </div>
					       
					        <div class="middle" style="height:300px;overflow: auto;overflow-x: hidden;padding-top: 20px;" id="middleSectionId">
								<div id="docFolder"  style="margin-left:40px; margin-bottom: 10px;" >
									<b style="margin-right:20px;">Folder</b>
									<apex:selectList value="{!strFolderId}"  size="1" style="max-width:96%;" onchange="updateList();">
		                           		<apex:selectOptions value="{!lstDocumentFolder}" ></apex:selectOptions>
		                         	</apex:selectList>
	                         	</div>
		                         
		                         <apex:outputPanel id="documentFolder" layout="block" style="margin-left: 40px;">
			                         <apex:repeat value="{!mapFolderToListDocument[strFolderId]}" var="doc" >
			                         	<div class="imgCss" >
				                         	<apex:outputText value="{!doc.Name}" /><br/>
				                         	<img class = "imgTag" id="{!doc.Name}" src = "{!$Site.Prefix}/servlet/servlet.FileDownload?file={!doc.Id}" width="80" height="80"  ondblclick="selectFile(this,'{!doc.Id}');"/>
			                         	</div>
			                         	
			                         </apex:repeat>
			                         
			                         <apex:variable var="lstDoc" value="{!mapFolderToListDocument[strFolderId]}" />
			                         <apex:outputText rendered="{!lstDoc.size == 0}">
			                         	<br/>No file found in this folder
			                         </apex:outputText>
			                         
			                         <input type="hidden" id="selectedLogoId"/>
			                         
		                         </apex:outputPanel>
		                         
	                         </div>
	                         
                         	<div class="topRight" style="background: none;padding: 0px;">
					            <div class="middle" style="padding-top: 5px;">
									<table width="100%" border="">
										<tr>
											<td style="width:50%;">
												<input type="button" value="Done" style="float:right;cursor: pointer;font-weight: bold;" onclick="updateLogoId();"/>
											</td>
											<td style="width:50%;">
												<input type="button" value="Cancel" style="cursor: pointer;font-weight: bold;" onclick="closePopUp();"/>
											</td>
										</tr>
									</table>	
					            </div>
				        	</div>
						</div>
					</div>
					
					
				</apex:outputpanel>
				
				<!--------- END ::--Select Logo Section  =--------->
				
				
				<!-- ----------Start of Action status --> 
				<apex:actionstatus id="loading">
			        <apex:facet name="start">
			            <div id="salesforceSource_blurybackground" style="z-index:9999; position:fixed; left:1px; top:1px; width:100%;height:100%; text-align:center; vertical-align: middle; background-color: #dcdcdc; opacity:0.4;filter:alpha(opacity=40)"></div>
			            <div id="ManageMembersViewport_loading" class="waitingSearchDiv" style="width: 100%; height: 80%; display: ''; ">
			                <div style="width: 144px;vertical-align: middle;" class="waitingHolder">
			                    <table align="center" valign="middle" style="width: 100%; height: 30%">
			                        <tr align="center" valign="middle" style="width: 100%; height: 30%">
			                            <td valign="middle"><img src="/img/loading.gif"/><span class="waitingDescription"><b>Loading...</b></span></td>
			                        </tr>
			                    </table>
			                </div>       
			            </div> 
			            <div id="ManageMembersViewport_loading" class="waitingSearchDiv" style="width: 100%; height: 100%; display: ''; "></div>
			            <script>document.getElementById('ManageMembersViewport_loading').height = window.innerHeight * (3/4);</script>
			        </apex:facet>
			    </apex:actionstatus>
				<!-- ----------End of Action status -->
			
			
		</apex:outputPanel>		 
		
		<apex:outputpanel id="scriptCode"> 
			<script> 
				hideDescription();
				var mapIdToValue = new Object(); 
				
				checkCssStatus($('#defaultTD input').is(":checked"));
				
				//function to update css on base of 'default' check box value
				function checkCssStatus(isDefault)
				{
					if(isDefault==false)
					{ 
						$('.previewRecord').css({'color':'{!customSetting.SLSI__Page_Records_Color__c}',
													'font-size':'{!customSetting.SLSI__Page_Records_Font_Size__c}', 
													'font-family':'{!customSetting.SLSI__Page_Records_Font_Family__c}'});
													
						$('.previewDefault').css({'color':'{!customSetting.SLSI__Default_Font_Color__c}',
													'font-size':'{!customSetting.SLSI__Default_Font_Size__c}', 
													'font-family':'{!customSetting.SLSI__Default_Font_Family__c}'});
						$('.previewHeading').css({'color':'{!customSetting.SLSI__Page_Headings_Color__c}',
													'font-size':'{!customSetting.SLSI__Page_Headings_Font_Size__c}', 
													'font-family':'{!customSetting.SLSI__Page_Headings_Font_Family__c}'});
						
						$('.previewHeader').css({'background-color':'{!customSetting.SLSI__Header_Background_Color__c}',
													'color':'{!customSetting.SLSI__Header_Text_Color__c}'});
						
						$('.previewFooter').css({'background-color':'{!customSetting.SLSI__Footer_Background_Color__c}',
													'color':'{!customSetting.SLSI__Footer_Text_Color__c}'});
													
						$('#previewMainSection').css('background-color','{!customSetting.SLSI__Main_Background_Color__c}'); 
						
						$('#logoDiv').css('background-color','{!customSetting.SLSI__Top_Bar_Background_Color__c}');
						
						$('#featuredGrp').css('color','{!customSetting.SLSI__Featured_Group_Highlight_Color__c}');
						
						$('#selectedGrp').css('color','{!customSetting.SLSI__Selected_Group_Color__c}');
						
						$('input[type=text], select, #selectLogo').attr('disabled',false);
						
						$('.color-box').css('pointer-events', 'visible');
						strLogoId = $('#selectedLogoId').val() != '' ? $('#selectedLogoId').val() : '{!customSetting.SLSI__Logo__c}';
						$('.SLSI__imgTagLogo__c').attr('src','{!$Site.Prefix}/servlet/servlet.FileDownload?file='+strLogoId);
						
					}
					else
					{
						$('input[type=text]:not(#footerText > input), select, #selectLogo').attr('disabled',true);
						$('.color-box').css('pointer-events', 'none');
						$('.previewRecord').removeAttr('style');
						$('.previewDefault').removeAttr('style');
						$('.previewHeading').removeAttr('style');
						$('.previewHeader').removeAttr('style');
						$('.previewFooter').removeAttr('style');
						
						$('#previewMainSection').css('background-color',''); 
						
						$('#logoDiv').css('background-color','');
						
						$('#featuredGrp').css('color','#c52032');
						$('#selectedGrp').css('color','#ba0320');
						
						$('.SLSI__imgTagLogo__c').attr('src','{!URLFOR($Resource.SL_IntranetHub,'/IntranetHub/images/logo.png')}');
						
					}
					
					if($('#defaultTD input').length == 0)
					{
						$('.color-box').css('pointer-events', 'none');
						$('select, #selectLogo').attr('disabled',true);
					}
				}
				
				//To update css style in preview section whenever we made some changes in custom setting field values
				function updateFontCss(cssName,label,cssValue)
				{
					if(label.indexOf('Heading') !=-1)
						$('.previewHeading').css(cssName,cssValue)
						
					else if(label.indexOf('Record') !=-1)
						$('.previewRecord').css(cssName,cssValue)
						
					else if(label.indexOf('Default') !=-1)
						$('.previewDefault').css(cssName,cssValue)
						
					else if(label.indexOf('Footer') !=-1){
							cssName = label.indexOf('Background') != -1 ? 'background-color' : 'color';
							$('.previewFooter').css(cssName,cssValue)
						}
						
					else if(label.indexOf('Header') !=-1){
							cssName = label.indexOf('Background') != -1 ? 'background-color' : 'color';
							$('.previewHeader').css(cssName,cssValue)
						}
						
					else if(label.indexOf('Featured') !=-1)
						$('#featuredGrp').css('color',cssValue)
					
					
					else if(label.indexOf('Top_Bar') !=-1)
						$('#logoDiv').css('background-color', cssValue);
					
					
					else if(label.indexOf('Main_Background') !=-1)
						$('#previewMainSection').css('background-color', cssValue);
					
					
					else if(label.indexOf('Selected') !=-1)
						$('#selectedGrp').css('color',cssValue)
					
				}
				
				// called on click of 'Update Custom setting' button
				// do function of setting updated value in repective field of custom setting
				function updateSetting()
				{
					for (var key in mapIdToValue) {
					  $('#'+key).val(mapIdToValue[key])
					}
					updateCustomSetting();
				}
				
				//to store value in map whenever picklist or thier input field changes the values in UI
				function storeIds(idToUpdate, cssValue )
				{
					mapIdToValue[idToUpdate] = cssValue;
				}
				
		    	//Script to be used when we click on color box
					$('.color-box').colpick({
						colorScheme:'dark',
						layout:'rgbhex',
						color:'ff8800',
						onSubmit:function(hsb,hex,rgb,el) {
							if(!$('#defaultTD input').is(":checked"))
							{
								$(el).css('background-color', '#'+hex);
								$('#colorField'+el.id+ ' input').val('#'+hex);
								updateFontCss('color',el.id,'#'+hex);
							}
							$(el).colpickHide();
						}
					})
					
				
				// funtion to show div section on click of ' select logo' button	
				function chooseFile()
				{
					$('#eventBgId').show();
				}
				
				// to close select logo widnow
				function closePopUp()
				{
					$('#eventBgId').hide();
				}
				
				//To redirect on main pagelayout editor, when clicked on 'Back To Layout Editor' button
				function backToMainPage()
				{
					currentURL = window.location.href;
					window.location.href = currentURL.substring(0,currentURL.indexOf('&'));
				}
				
				// To select/unselect a logo file on double click over image
				function selectFile(elRef, logoId)
				{
					$( '.imgTag' ).each(function() {
					  if(this == elRef && ($(this).css('border') == '3px solid rgb(224, 224, 224)' || $(this).css('border-top-color')=='rgb(224, 224, 224)')){
							$(this).css('border','3px solid rgb(0, 128, 0)');
							$('#selectedLogoId').val(logoId);
						}
					else
						$(this).css('border','3px solid rgb(224, 224, 224)');
					});
				}
				
				//To update logo image on preview section when clicked on 'Done' button
				function updateLogoId()
				{
					$( '.imgTag' ).each(function() {
						if($(this).css('border') == '3px solid rgb(0, 128, 0)' || $(this).css('border-top-color')=='rgb(0, 128, 0)')
						{
							$('[id$=inputlogoId]').val($('#selectedLogoId').val());
							$('.SLSI__imgTagLogo__c').attr('src','{!$Site.Prefix}/servlet/servlet.FileDownload?file='+$('#selectedLogoId').val());
						}
					});
					closePopUp();
				}
				
				function hideDescription()
				{
					if($('#footerPanelHelp').html() == '')
						$('#descriptionH2').hide();
					else
						$('#descriptionH2').show();
				}
				
			</script>
		</apex:outputpanel>
			
	</apex:form>	
	
</apex:page>